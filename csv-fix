#!/usr/bin/env php
<?php

try {
    if (in_array($argv[1] ?? '', ['-?', '-h', '--help'])) {
        exit(
            "Utilizzo: " . PHP_EOL .
            "   " . pathinfo($argv[0], PATHINFO_FILENAME) . " " .
            "\"path/file/csv\"" . " " .
            "[numero colonna]" . " " .
            "[limite caratteri]" . " " .
            "\"[separatore]\"" . PHP_EOL . PHP_EOL .
            "Esempio: " . PHP_EOL .
            "   " . pathinfo($argv[0], PATHINFO_FILENAME) . " " .
            "\"" . getenv('HOME') . DIRECTORY_SEPARATOR . "asta.csv\" 3 55 \"\t\"" . PHP_EOL
        );
    }

    if (empty($argv[2])) {
        $argv[2] = 2;
    }
    if (empty($argv[3])) {
        $argv[3] = 55;
    }
    if (empty($argv[4])) {
        $argv[4] = "\t";
    }

    $path = trim($argv[1] ?? readline("Path relativo al file .csv: "));
    $column = $argv[2] ?? readline("Numero colonna: ");
    $limit = $argv[3] ?? readline("Limite caratteri: ");
    $separator = $argv[4] ?? readline("Separatore: ");

    $column--;

    switch ($separator) {
        case "\\t":
            $separator = "\t";
            break;
        case "\\n":
            $separator = "\n";
            break;
    }

    if (!file_exists($path)) {
        throw new Exception('Impossibile proseguire, file non trovato' . PHP_EOL, 1);
    }
    else if (!is_readable($path) || !is_writable($path)) {
        throw new Exception('Impossibile proseguire, autorizzazioni non sufficienti per apportare modifiche' . PHP_EOL, 2);
    }

    $csv_content = array_map(function ($value) use ($separator) {
        return str_getcsv(trim($value), $separator);
    }, file($path));

    $csv_encoding = mb_detect_encoding(file_get_contents($path), mb_list_encodings(), true);

    echo "Enconding: CSV " . $csv_encoding . " | PHP " . mb_internal_encoding() . PHP_EOL . PHP_EOL;

    $result = [
        'fixed' => [],
        'to_fix' => []
    ];

    foreach ($csv_content as $i => &$row) {
        $length = mb_strlen($row[$column] ?? "");
        if ($length > $limit) {
            $tmp_list = array_map(function ($value) {
                return trim($value);
            }, explode(',', $row[$column]));
            $tmp_length = mb_strlen($tmp_list[0]);
            if ($tmp_length <= $limit) {
                $corrected = true;
                $row[$column] = mb_convert_encoding(array_shift($tmp_list), mb_internal_encoding(), $csv_encoding);
                $row[$column + 1] = implode(', ', $tmp_list) . '<br>' . $row[$column + 1];
                $result['fixed'][] = "\033[0;32m" . "Corretto elemento alla riga \"" . $row[0] . "\" -> \"" . $row[$column] . "\"" . "\033[0m" . PHP_EOL;
            }
            else {
                $text = mb_convert_encoding(mb_substr($row[$column], 0, $limit), mb_internal_encoding(), $csv_encoding);
                $result['to_fix'][] = "\033[0;31m" . "Superato limite alla riga \"" . $row[0] . "\" di " . ($length - $limit) . " caratteri -> \"" . $text . "\"" . "\033[0m" . PHP_EOL;
            }
        }
    }

    foreach ($result as $type) {
        foreach ($type as $element) {
            echo $element;
        }
    }

    $fixed = count($result['fixed']);
    $to_fix = count($result['to_fix']);

    echo PHP_EOL . "Corrett" . ($fixed == 1 ? 'o' : 'i') . " \"" . $fixed . "\" element" . ($fixed == 1 ? 'o' : 'i') . PHP_EOL;
    echo "Superato limite in \"" . $to_fix . "\" element" . ($to_fix == 1 ? 'o' : 'i') . PHP_EOL . PHP_EOL;

    if (!empty($result['fixed'])) {
        $create_csv = function ($csv_content, $separator) {
            $handle = fopen('php://memory', 'r+');
            foreach ($csv_content as $item) {
                fputcsv($handle, $item, $separator);
            }
            rewind($handle);
            return stream_get_contents($handle);
        };

        $dir = pathinfo($path, PATHINFO_DIRNAME);
        $filename = pathinfo($path, PATHINFO_FILENAME) . '_fix.' . pathinfo($path, PATHINFO_EXTENSION);
        $path_fix = $dir . DIRECTORY_SEPARATOR . $filename;

        file_put_contents($path_fix, null);
        $content_fix = $create_csv($csv_content, $separator);

        if (is_readable($path_fix) && is_writable($path_fix) && file_put_contents($path_fix, $content_fix) !== false) {
            echo "File CSV corretto salvato in \"" . $path_fix . "\"" . PHP_EOL;
        }
        else {
            throw new Exception("Impossibile salvare il file CSV corretto in \"" . $path_fix . "\"" . PHP_EOL, 2);
        }
    }
}
catch (Exception $e) {
    echo $e->getMessage();
    exit($e->getCode());
}
